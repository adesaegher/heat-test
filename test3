heat_template_version: 2013-05-23
parameters:
  key_name:
    type: String
    default: heat_key
  flavor:
    type: String
    default: m1.small
  image:
    type: String
    default: CentOS-7-x86_64-os-config2
resources:
  config:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
      - name: foo
      - name: bar
      outputs:
      - name: result
      config:
        script: |
          #!/bin/sh -x
          echo $foo > /tmp/$bar
          echo -n "The file /tmp/$bar contains `cat /tmp/$bar`" > $heat_outputs_path.result

  deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server
      input_values:
        foo: fooooo
        bar: baaaaa

  other_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server
      input_values:
        foo: fu
        bar: barmy

  server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG
      user_data:
        multi_part_mime:
        - subtype: cloud-config
          part:
            as_yaml_str:
              write_files:
              - path: /opt/stack/os-config-refresh/configure.d/55-heat-config-bash
                permissions: '0755'
                content: |
                  #!/usr/bin/env python
                  import json
                  import logging
                  import os
                  import requests
                  import subprocess
                  import sys
                  
                  EXE_DIR = os.environ.get('HEAT_SHELL_EXECUTION',
                                           '/var/lib/heat-config/heat-shell')
                  OUTPUTS_DIR = os.environ.get('HEAT_SHELL_OUTPUTS',
                                               '/var/run/heat-config/heat-shell')
                  CONF_FILE = os.environ.get('HEAT_SHELL_CONFIG',
                                             '/etc/heat-config/heat-shell')
                  
                  def prepare_dir(path):
                      if not os.path.isdir(path):
                          os.makedirs(path, 0o755)
                      for fn in os.listdir(path):
                          os.remove(os.path.join(path, fn))
                  
                  def main(argv=sys.argv):
                      log = logging.getLogger('heat-shell-config')
                      handler = logging.StreamHandler(sys.stderr)
                      handler.setFormatter(
                          logging.Formatter(
                              '[%(asctime)s] (%(name)s) [%(levelname)s] %(message)s'))
                      log.addHandler(handler)
                      log.setLevel('DEBUG')
                  
                      if not os.path.exists(CONF_FILE):
                          log.error('No config file %s' % CONF_FILE)
                          return 1
                  
                      prepare_dir(EXE_DIR)
                      prepare_dir(OUTPUTS_DIR)
                  
                      config = json.load(open(CONF_FILE))
                  
                      for seq, c in enumerate(config):
                          env = os.environ.copy()
                          for input in c['inputs']:
                              input_name = input['name']
                              env[input_name] = c.get('input_values', {}).get(input_name, '')
                              log.info('%s=%s' % (input_name, env[input_name]))
                  
                          fn = '%s/%02d-%s' % (EXE_DIR, seq, c['id'])
                          heat_outputs_path = '%s/%02d-%s' % (OUTPUTS_DIR, seq, c['id'])
                          env['heat_outputs_path'] = heat_outputs_path
                  
                          with open(fn, 'a') as f:
                              f.write(c.get('config', {}).get('script', ''))
                          os.chmod(fn, 0o755)
                  
                          try:
                              log.debug('Running %s' % fn)
                              subprocess.check_call([fn], env=env, close_fds=True)
                              sys.stdout.flush()
                              sys.stderr.flush()
                              log.info('Completed %s' % fn)
                          except subprocess.CalledProcessError as e:
                              log.error("Error running %s. [%s]\n" % (fn, e))
                              log.error("Aborting...")
                              return 1
                  
                          response = {}
                          for output in c['outputs']:
                              output_name = output['name']
                              try:
                                  with open('%s.%s' % (heat_outputs_path, output_name)) as out:
                                      response[output_name] = out.read()
                              except IOError:
                                  pass
                          signal_data = json.dumps(response)
                          log.debug('Signalling %s to %s' % (signal_data, c['signal_id']))
                          r = requests.post(c['signal_id'], data=signal_data)
                          log.debug('Response %s ' % r)
                  
                  if __name__ == '__main__':
                      sys.exit(main(sys.argv))


              - path: /opt/stack/os-config-applier/templates/etc/heat-config/heat-shell
                content: "{{Heat::Shell}}"

outputs:
  result:
    value:
      get_attr: [deployment, result]
  other_result:
    value:
      get_attr: [other_deployment, result]
